package nortantis.swing;

import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;

import nortantis.IconDrawer;
import nortantis.MapText;
import nortantis.Region;
import nortantis.TextDrawer;
import nortantis.editor.CenterEdit;
import nortantis.editor.CenterIcon;
import nortantis.editor.CenterTrees;
import nortantis.editor.EdgeEdit;
import nortantis.editor.RegionEdit;
import nortantis.graph.voronoi.Center;
import nortantis.graph.voronoi.Edge;
import nortantis.util.Range;

/**
 * Stores edits made by a user to a map. This is initialized from the generated map the first time the map is drawn, and then afterwards the
 * edits are the source of truth for what the map should look like.
 * 
 * Everything in this class that can change after the edits are first generated needs to be thread safe so that the editor can edit it wall
 * the map creator draws. And the text drawer needs to update MapText objects with areas and bounds.
 * 
 * @author joseph
 *
 */
@SuppressWarnings("serial")
public class MapEdits implements Serializable
{
	/**
	 * Text the user has edited, added, moved, or rotated. The key is the text id.
	 */
	public CopyOnWriteArrayList<MapText> text;
	public List<CenterEdit> centerEdits;
	public ConcurrentHashMap<Integer, RegionEdit> regionEdits;
	public boolean hasIconEdits;
	public List<EdgeEdit> edgeEdits;

	/**
	 * Not stored. A flag the editor uses to tell TextDrawer to generate text and store it as edits.
	 */
	public boolean bakeGeneratedTextAsEdits;

	public MapEdits()
	{
		text = new CopyOnWriteArrayList<>();
		centerEdits = new ArrayList<>();
		regionEdits = new ConcurrentHashMap<>();
		edgeEdits = new ArrayList<>();
	}

	public boolean isEmpty()
	{
		return text.isEmpty() && centerEdits.isEmpty();
	}

	public void initializeCenterEdits(List<Center> centers, IconDrawer iconDrawer)
	{
		centerEdits = new ArrayList<>(centers.size());
		for (int index : new Range(centers.size()))
		{
			Center c = centers.get(index);
			centerEdits.add(new CenterEdit(index, c.isWater, c.isLake, c.region != null ? c.region.id : null, null, null));
		}

		hasIconEdits = true;
		storeCenterIcons(iconDrawer.centerIcons);
		storeCenterTrees(iconDrawer.trees);
	}

	public void initializeEdgeEdits(List<Edge> edges)
	{
		edgeEdits = new ArrayList<>(edges.size());
		for (Edge edge : edges)
		{
			edgeEdits.add(new EdgeEdit(edge.index, edge.river));
		}
	}

	public void initializeRegionEdits(Collection<Region> regions)
	{
		for (Region region : regions)
		{
			RegionEdit edit = new RegionEdit(region.id, region.backgroundColor);
			regionEdits.put(edit.regionId, edit);
		}
	}

	/**
	 * Stores icons generated by IconDrawer into map edits so they can be saved and edited.
	 * 
	 * @param centerIcons
	 *            Icons generated by IconDrawer
	 */
	private void storeCenterIcons(Map<Integer, CenterIcon> centerIcons)
	{
		for (CenterEdit edit : centerEdits)
		{
			edit.icon = null;
		}

		for (Map.Entry<Integer, CenterIcon> entry : centerIcons.entrySet())
		{
			int index = entry.getKey();
			CenterIcon icon = entry.getValue();
			centerEdits.get(index).icon = icon;
		}
	}

	private void storeCenterTrees(Map<Integer, CenterTrees> cTrees)
	{
		for (CenterEdit edit : centerEdits)
		{
			edit.trees = null;
		}

		for (Map.Entry<Integer, CenterTrees> entry : cTrees.entrySet())
		{
			int index = entry.getKey();
			CenterTrees trees = entry.getValue();
			centerEdits.get(index).trees = trees;
		}
	}
	
	/**
	 * If the given point lands within the bounding box of a piece of text, this returns the first one found. Else null is returned.
	 */
	public MapText findTextPicked(nortantis.graph.geom.Point point)
	{
		java.awt.Point awtPoint = point.toAwtPoint();
		for (MapText mp : text)
		{
			if (mp.value.length() > 0)
			{
				if (mp.line1Area != null)
				{
					if (mp.line1Area.contains(awtPoint))
						return mp;
				}

				if (mp.line2Area != null)
				{
					if (mp.line2Area.contains(awtPoint))
						return mp;
				}
			}
		}
		return null;
	}

	public List<MapText> findTextSelectedByBrush(nortantis.graph.geom.Point point, double brushDiameter)
	{
		Area brush = new Area(
				new Ellipse2D.Double(point.x - brushDiameter / 2.0, point.y - brushDiameter / 2.0, brushDiameter, brushDiameter));
		List<MapText> result = new ArrayList<>();

		for (MapText mp : text)
		{
			if (mp.value.length() > 0)
			{
				if (TextDrawer.doAreasIntersect(brush, mp.line1Area) || TextDrawer.doAreasIntersect(brush, mp.line2Area))
				{
					result.add(mp);
				}
			}
		}
		return result;
	}

	public MapEdits deepCopy()
	{
		// MapEdits copy = Helper.deepCopy(this);
		MapEdits copy = new MapEdits();
		for (MapText mText : text)
		{
			copy.text.add(mText.deepCopy());
		}

		for (CenterEdit cEdit : centerEdits)
		{
			copy.centerEdits.add(cEdit.deepCopy());
		}

		for (Map.Entry<Integer, RegionEdit> entry : regionEdits.entrySet())
		{
			copy.regionEdits.put(entry.getKey(), entry.getValue().deepCopy());
		}

		copy.hasIconEdits = hasIconEdits;

		for (EdgeEdit eEdit : edgeEdits)
		{
			copy.edgeEdits.add(eEdit.deepCopy());
		}

		copy.bakeGeneratedTextAsEdits = bakeGeneratedTextAsEdits;

		return copy;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MapEdits other = (MapEdits) obj;
		return Objects.equals(centerEdits, other.centerEdits) && Objects.equals(edgeEdits, other.edgeEdits)
				&& hasIconEdits == other.hasIconEdits && Objects.equals(regionEdits, other.regionEdits) && Objects.equals(text, other.text);
	}
}
