package nortantis.editor;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import hoten.voronoi.Center;
import nortantis.CenterIcon;
import nortantis.CenterTrees;
import nortantis.IconDrawer;
import nortantis.MapText;
import nortantis.Region;
import util.Range;

/**
 * Stores edits made by a user to a map. These are stored as modifications from the generated content.
 * @author joseph
 *
 */
@SuppressWarnings("serial")
public class MapEdits implements Serializable
{
	/**
	 * Text the user has edited, added, moved, or rotated. The key is the text id.
	 */
	public List<MapText> text;
	public List<CenterEdit> centerEdits;
	public Map<Integer, RegionEdit> regionEdits;
	public boolean hasIconEdits;
		
	public MapEdits()
	{
		text = new ArrayList<>();
		centerEdits = new ArrayList<>();
		regionEdits = new HashMap<>();
	}

	public boolean isEmpty()
	{
		return text.isEmpty() && centerEdits.isEmpty();
	}
	
	public void initializeCenterEdits(List<Center> centers, IconDrawer iconDrawer)
	{
		centerEdits = new ArrayList<>(centers.size());
		for (int index : new Range(centers.size()))
		{
			Center c = centers.get(index);
			centerEdits.add(new CenterEdit(index, c.isWater, c.region != null ? c.region.id : null, null, null));
		}
		
		hasIconEdits = true;
		storeCenterIcons(iconDrawer.centerIcons);
		storeCenterTrees(iconDrawer.trees);
	}
	
	public void initializeRegionEdits(Collection<Region> regions)
	{
		for (Region region : regions)
		{
			RegionEdit edit = new RegionEdit(region.id, region.backgroundColor);
			regionEdits.put(edit.regionId, edit);
		}
	}

	/**
	 * Stores icons generated by IconDrawer into map edits so they can be saved and edited.
	 * @param centerIcons Icons generated by IconDrawer
	 */
	private void storeCenterIcons(Map<Integer, CenterIcon> centerIcons)
	{
		for (CenterEdit edit : centerEdits)
		{
			edit.icon = null;
		}
		
		for (Map.Entry<Integer, CenterIcon> entry : centerIcons.entrySet())
		{
			int index = entry.getKey();
			CenterIcon icon = entry.getValue();
			centerEdits.get(index).icon = icon;
		}
	}
	
	private void storeCenterTrees(Map<Integer, CenterTrees> cTrees)
	{
		for (CenterEdit edit : centerEdits)
		{
			edit.trees = null;
		}
		
		for (Map.Entry<Integer, CenterTrees> entry : cTrees.entrySet())
		{
			int index = entry.getKey();
			CenterTrees trees = entry.getValue();
			centerEdits.get(index).trees = trees;
		}
	}
}
